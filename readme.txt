                                        面向对象的六大原则
====================================================================================================
单一职责原则(Single Responsiblity Principle SRP)
    对于一个类而言,仅有一个引起它变化的原因;
    两个完全不一样的功能就不应该放在一个类中,一个类中应该是一组相关性很高的函数、数据的封装
====================================================================================================
开闭原则(Open Close Principle OCP)
    软件中的对象(类、模块、函数等)应该对于扩展开放,修改封闭
====================================================================================================
里氏替换原则(LSP)
    所有引用基类的地方不需要能透明地使用其子类对象
====================================================================================================
依赖倒置原则(Dependence Inversion Principle DIP)
    使得高层次的模块不依赖低层次模块的实现细节,将其倒置----面向接口和面向抽象编程
====================================================================================================
接口隔离原则(InterfaceSegregation Principle ISP)
    类间的依赖关系应该建立在最小接口上,臃肿的接口要拆分最小,类在implement时只需要知道它感兴趣的方法
====================================================================================================
迪米特原则(Law Of Demeter LOD)
    一个对象应该对其他对象有最少的了解;一个类应该对自己需要耦合或调用的类知道最少


                                    设计模式
====================================================================================================
应用最广的模式--单例模式 [见com.kuangye.patterns.singleTon包下栗子]
====================================================================================================
    优点:
        内存只有一个实例,减少内存开支、资源多重占用;
        适用于一个对象产生需要很多资源时,如读取配置、产生其他依赖对象时,通过应用启动时产生一个单例对象来永驻内存
        在系统全局访问,优化和共享资源

    缺点:
        无接口,扩展困难
        持有Context会发生内存泄露,故传递给单例对象最好是ApplicationContext

====================================================================================================
自由扩展--Builder模式[见com.kuangye.patterns.build包下栗子]
    优点:
        1.相同的方法不同执行顺序产生不同结果
        2.多方法装配在一个对象中产生的结果不同
        3.初始化一个对象参数多且很多是默认值时
        4.常用于配置类的构造器将配置和目标类隔离,避免过多的setter方法;
          通过链式结构简单易懂
        5.良好封装,目标类不用知道产品内部细节

    缺点:
        产生多余Builder对象及StudentConfig对象;消耗内存
====================================================================================================
解耦钥匙--Observer模式[见com.kuangye.patterns.observer包下栗子]
    优点:
        1.观察者和被观察者之间的抽象耦合
        2.增加灵活性和扩展性

    缺点:
        1.一个观察者卡顿影响整体执行效率
====================================================================================================
编程中的后悔药--备忘录模式[见com.kuangye.patterns.memo包下栗子]
    优点:
        1.提供一个可以恢复状态的机制,使得用户方便地回到历史状态
    缺点:
        1.每次保存会消耗一定内存